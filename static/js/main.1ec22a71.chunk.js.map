{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoTitle","props","react_default","a","createElement","title","TodoListTitle","NewTodo","Fragment","TextField_default","style","marginLeft","id","label","margin","variant","onChange","newTodoChanged","value","newTodo","onKeyPress","event","key","addTodo","IconButton_default","aria-label","disabled","AddCircle_default","onClick","color","fontSize","TodoList","List_default","todos","map","todo","index","ListItem_default","dense","Checkbox_default","checked","done","tabIndex","toggleTodoDone","ListItemText_default","primary","concat","textDecoration","ListItemSecondaryAction_default","Delete_default","removeTodo","App","state","this","setState","target","Object","toConsumableArray","objectSpread","console","log","splice","AppBar_default","position","Toolbar_default","Typography_default","Grid_default","direction","justify","alignItems","container","item","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oeAyHA,SAASA,EAAUC,GACjB,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,OAKb,SAASC,EAAcL,GACrB,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,OAKb,SAASE,EAAQN,GACf,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAMK,SAAP,KACEN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACAO,MAAO,CAACC,WAAY,QACpBC,GAAG,iBACHC,MAAM,WACNC,OAAO,QACPC,QAAQ,WACRC,SAAUf,EAAMgB,eAChBC,MAAOjB,EAAMkB,QACbC,WAAY,SAAAC,GACQ,UAAdA,EAAMC,KACRrB,EAAMsB,aAKVrB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAYsB,aAAW,SAASC,UAAWzB,EAAMkB,SAC/CjB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAYyB,QAAS3B,EAAMsB,QAASM,MAAM,UAAUnB,MAAO,CAAEoB,SAAU,QAM/E,SAASC,EAAS9B,GAChB,OACEC,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,KACGF,EAAMgC,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACflC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAUmB,IAAKc,EAAOE,OAAK,GACzBpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CACEqC,QAASL,EAAKM,KACdC,UAAW,EACXd,QAAS,kBAAM3B,EAAM0C,eAAeP,MAEtClC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAc0C,QAAO,GAAAC,OAAKV,EAAM,EAAX,MAAAU,OAAiBX,EAAK9B,OAASK,MAAOyB,EAAKM,KAAO,CAACM,eAAgB,gBAAkB,KAC1G7C,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,KACED,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAYsB,aAAW,UACrBvB,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAYyB,QAAS,kBAAM3B,EAAMiD,WAAWd,IAAQP,MAAM,oBASzDsB,iNAvKbC,MAAQ,CACN/C,MAAO,aACPc,QAAS,GACTc,MAAO,CACL,CACE5B,MAAO,kBACPoC,MAAM,GAER,CACEpC,MAAO,uBACPoC,MAAM,mFAKGpB,GACbgC,KAAKC,SAAS,CACZnC,QAASE,EAAMkC,OAAOrC,0CAKE,KAAvBmC,KAAKD,MAAMjC,SAGdkC,KAAKC,SAAS,CACZnC,QAAS,GACTc,MAAMuB,OAAAC,EAAA,EAAAD,CAAKH,KAAKD,MAAMnB,OAAjBa,OAAA,CAAwB,CAC3BzC,MAAOgD,KAAKD,MAAMjC,QAClBsB,MAAM,8CAKGL,GACb,IAAMH,EAAKuB,OAAAC,EAAA,EAAAD,CAAOH,KAAKD,MAAMnB,OAC7BA,EAAMG,GAANoB,OAAAE,EAAA,EAAAF,CAAA,GACKvB,EAAMG,GADX,CAEEK,MAAOR,EAAMG,GAAOK,OAEtBkB,QAAQC,IAAI3B,GACZoB,KAAKC,SAAS,CACZrB,6CAIOG,GACT,IAAMH,EAAKuB,OAAAC,EAAA,EAAAD,CAAOH,KAAKD,MAAMnB,OAC7BA,EAAM4B,OAAOzB,EAAO,GACpBiB,KAAKC,SAAS,CACZrB,2CAKF,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAQ4D,SAAS,SAASlC,MAAM,WAC9B3B,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,KACED,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,CAAYY,QAAQ,KAAKc,MAAM,WAA/B,cAOJ3B,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CACAgE,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXC,WAAS,GAEPpE,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAMoE,MAAI,GACRrE,EAAAC,EAAAC,cAACJ,EAAD,CAAWK,MAAOgD,KAAKD,MAAM/C,SAG/BH,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAMoE,MAAI,GACRrE,EAAAC,EAAAC,cAACG,EAAD,CACAY,QAAWkC,KAAKD,MAAMjC,QACtBI,QAAS8B,KAAK9B,QAAQiD,KAAKnB,MAC3BpC,eAAgBoC,KAAKpC,eAAeuD,KAAKnB,SAI3CnD,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAMoE,MAAI,GACRrE,EAAAC,EAAAC,cAACE,EAAD,CAAeD,MAAO,eAGxBH,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAMoE,MAAI,GACRrE,EAAAC,EAAAC,cAAC2B,EAAD,CACAE,MAAOoB,KAAKD,MAAMnB,MAClBU,eAAgBU,KAAKV,eAAe6B,KAAKnB,MACzCH,WAAYG,KAAKH,WAAWsB,KAAKnB,kBA9F3BoB,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ec22a71.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircle from '@material-ui/icons/AddCircle';\n\nclass App extends Component {\n  \n  state = {\n    title: 'Todo title',\n    newTodo: '',\n    todos: [\n      {\n        title: 'Making Todo App',\n        done: false\n      },\n      {\n        title: 'Refactoring Todo App',\n        done: false\n      }\n    ]\n  };\n\n  newTodoChanged(event){\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  addTodo(){\n    if(this.state.newTodo === ''){\n      return;\n    }\n    this.setState({\n      newTodo: '',\n      todos: [...this.state.todos, {\n        title: this.state.newTodo,\n        done: false\n      }]\n    });\n  }\n\n  toggleTodoDone(index){\n    const todos = [...this.state.todos];\n    todos[index] = {\n      ...todos[index],\n      done: !todos[index].done\n    };\n    console.log(todos);\n    this.setState({\n      todos\n    });\n  }\n\n  removeTodo(index){\n    const todos = [...this.state.todos];\n    todos.splice(index, 1);\n    this.setState({\n      todos\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"primary\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Todo App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        \n      \n        <Grid \n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        container>\n\n          <Grid item>\n            <TodoTitle title={this.state.title} />\n          </Grid>\n\n          <Grid item>\n            <NewTodo \n            newTodo = {this.state.newTodo} \n            addTodo={this.addTodo.bind(this)} \n            newTodoChanged={this.newTodoChanged.bind(this)}\n            />\n          </Grid>\n\n          <Grid item>\n            <TodoListTitle title={'Todo List'}/> \n          </Grid>\n\n          <Grid item>\n            <TodoList\n            todos={this.state.todos}\n            toggleTodoDone={this.toggleTodoDone.bind(this)} \n            removeTodo={this.removeTodo.bind(this)}\n            />\n          </Grid>\n\n        </Grid>\n\n        \n      </div>\n    );\n  }\n}\n\nfunction TodoTitle(props) {\n  return (\n    <h1>\n      {props.title}\n    </h1>\n  );\n}\n\nfunction TodoListTitle(props) {\n  return (\n    <h2>\n      {props.title}\n    </h2>\n  );\n}\n\nfunction NewTodo(props) {\n  return (\n    <React.Fragment>\n      <TextField\n      style={{marginLeft: '30px'}}\n      id=\"outlined-dense\"\n      label=\"New Todo\"\n      margin=\"dense\"\n      variant=\"outlined\"\n      onChange={props.newTodoChanged}\n      value={props.newTodo}\n      onKeyPress={event => {\n        if (event.key === 'Enter') {\n          props.addTodo();\n        }\n      }}\n      />\n\n      <IconButton aria-label=\"Delete\" disabled={!props.newTodo}>\n        <AddCircle  onClick={props.addTodo} color=\"primary\" style={{ fontSize: 35 }} />\n      </IconButton>\n    </React.Fragment>\n  );\n}\n\nfunction TodoList(props) {\n  return (\n    <List>\n      {props.todos.map((todo, index) => (\n        <ListItem key={index} dense >\n          <Checkbox\n            checked={todo.done}\n            tabIndex={-1}\n            onClick={() => props.toggleTodoDone(index)}\n          />\n          <ListItemText primary={`${index+1}. ${todo.title}`} style={todo.done ? {textDecoration: 'line-through'} : {} } />\n          <ListItemSecondaryAction>\n            <IconButton aria-label=\"Delete\">\n              <DeleteIcon onClick={() => props.removeTodo(index)} color=\"secondary\" />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}